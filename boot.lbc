<LOAD %env LOOKUP
 CAR
 CAR

 LOAD ()
 LOAD
  <LOAD ()

   LOAD ()
   LOAD LOOKUP        CONS
   LOAD symbol LOOKUP CONS
   LOAD LOAD          CONS
   LOAD SETCAR        CONS

   LOAD CAR           CONS
   LOAD LOOKUP        CONS
   LOAD %env          CONS
   LOAD LOAD          CONS
   LOAD CONS          CONS
   LOAD CONS          CONS

   LOAD symbol LOOKUP CONS
   LOAD LOAD          CONS
   LOAD EVAL          CONS
   LOAD COMPILE       CONS
   LOAD value LOOKUP  CONS
   LOAD LOAD          CONS
   LOAD CAR           CONS

   LOAD CAR           CONS
   LOAD LOOKUP        CONS
   LOAD %env          CONS
   LOAD LOAD          CONS

   CONS
   LOAD bytecode CONS

   RETURN>
 COMPILE
 CONS
 LOAD (symbol value)
 CONS
 LOAD macro
 CONS
 LOAD define
 CONS
 CONS

 LOAD %env LOOKUP
 CAR
 SETCAR>

(define cons
  <LOAD ()
   LOAD
    <LOAD cdr LOOKUP
     LOAD car LOOKUP
     CONS
     RETURN>
   COMPILE
   CONS
   LOAD (car cdr)
   CONS
   LOAD lambda
   CONS>)

(define lambda
  <LOAD ()
   LOAD
    <LOAD ()

     LOAD ()
     LOAD CONS           CONS
     LOAD lambda         CONS
     LOAD LOAD           CONS
     LOAD CONS           CONS
     LOAD argspec LOOKUP CONS
     LOAD LOAD           CONS
     LOAD CONS           CONS
     LOAD body LOOKUP COMPILE CONS
     LOAD LOAD           CONS
     LOAD ()             CONS
     LOAD LOAD           CONS

     CONS
     LOAD bytecode CONS

     RETURN>
   COMPILE
   CONS
   LOAD (argspec body)
   CONS
   LOAD macro
   CONS>)

(define +
  (lambda (a b)
     <LOAD a LOOKUP
      LOAD b LOOKUP
      ADD
      RETURN>))

(define eq
  (lambda (a b)
    <LOAD a LOOKUP
     LOAD b LOOKUP
     EQUAL
     RETURN>))

(define nilp
  '(macro (el)
          '(eq el '())))

(define list
  (lambda (elems)
    (cons (car elems) (list (cdr elems)))))
