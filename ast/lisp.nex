/[0-9]+/ {
	var err error
	lval.ival, err = strconv.Atoi(yylex.Text())
	if err != nil {
		yylex.Error(err.Error())
	}
	return tIntAtom
}

/"[^"\n]*"/ {
	text := yylex.Text()
    lval.str = text[1:len(text)-1]
    return tStringAtom
}

/[0-9a-zA-Z_+=*\/<>-]+/ {
	lval.sym = Symbol(yylex.Text())
	return tSymbol
}

/[()']/ {
    return int(yylex.Text()[0])
}

/[ \t\n]+/   { /* eat up whitespace */ }
/;;[^\n]*/   { /* eat up comments */ }
/./          { yylex.Error(fmt.Sprintf("unrecognized character: %v", yylex.Text())) }
//
package ast

import (
    "bytes"
    "fmt"
    "strconv"
)

type result struct {
	Ast Form
}

func (l *Lexer) Ast(prog Form) {
	l.parseResult.(*result).Ast = prog
}

func (l *Lexer) Error(err string) {}

func Parse(filename, source string) Form {
	result := &result{}
	lexer := NewLexerWithInit(bytes.NewBufferString(source), func(lex *Lexer) {
		lex.parseResult = result
	})

	yyErrorVerbose = true
	_ = yyParse(lexer)
	return result.Ast
}
